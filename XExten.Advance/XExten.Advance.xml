<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XExten.Advance</name>
    </assembly>
    <members>
        <member name="T:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute">
            <summary>
            执行器
            </summary>
        </member>
        <member name="P:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.ActionType">
            <summary>
            自定义执行
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.#ctor">
            <summary>
            执行器无参构造
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.#ctor(System.String)">
            <summary>
            有参构造
            </summary>
            <param name="ActionType"></param>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.Before(System.String,System.Type,System.Object[])">
            <summary>
            执行前
            </summary>
            <param name="methodName"></param>
            <param name="classInfo"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.After(System.String,System.Type,System.Object)">
            <summary>
            执行前
            </summary>
            <param name="methodName"></param>
            <param name="classInfo"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.AopFramework.AopAttribute.InterceptorBaseAttribute">
            <summary>
            拦截器
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.InterceptorBaseAttribute.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            执行器
            </summary>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.AopFramework.AopProxy">
            <summary>
            Aop
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfRealize``2">
            <summary>
            以接口的性质创建代理
            </summary>
            <typeparam name="TProxyInterface"></typeparam>
            <typeparam name="TImplement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfInherit``1">
            <summary>
            以自身的性质创建代理
            </summary>
            <typeparam name="TProxyClass"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfRealize(System.Type,System.Type)">
            <summary>
            以接口的性质创建代理
            </summary>
            <param name="ProxyInterface"></param>
            <param name="Implement"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfInherit(System.Type)">
            <summary>
            以自身的性质创建代理
            </summary>
            <param name="ProxyClass"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.CacheFramework.Caches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.Advance.CacheFramework.Caches.Redis">
            <summary>
            redis
            </summary>
        </member>
        <member name="P:XExten.Advance.CacheFramework.Caches.Memory">
            <summary>
            memoryCache
            </summary>
        </member>
        <member name="P:XExten.Advance.CacheFramework.Caches.RedisConnectionString">
            <summary>
            Redis链接字符串
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheSet``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RedisCacheSet``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheGet``1(System.Object)">
            <summary>
            获取Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RedisCacheGet``1(System.Object)">
            <summary>
            获取Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheRemove(System.Object)">
            <summary>
             删除Memory缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RedisCacheRemove(System.Object)">
            <summary>
            删除Redis缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheSetAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RedisCacheSetAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheGetAsync``1(System.Object)">
            <summary>
            获取Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RedisCacheGetAsync``1(System.Object)">
            <summary>
            获取Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheRemoveAsync(System.Object)">
            <summary>
             删除Memory缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RedisCacheRemoveAsync(System.Object)">
            <summary>
            删除Redis缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:XExten.Advance.CacheFramework.RedisCache.RedisCaches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.Advance.CacheFramework.RedisCache.RedisCaches.RedisConnectionString">
            <summary>
            链接字符串
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.DeleteRedisDataBase">
            <summary>
            删除所有redis库
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.DeleteRedisDataBaseAsync">
            <summary>
            异步删除所有redis库
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.MuxerInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            内部异常
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.MuxerHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            集群更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.MuxerConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.MuxerErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            错误事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.MuxerConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重连错误事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.MuxerConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.Save``1(System.Func{StackExchange.Redis.IDatabase,``0})">
            <summary>
            保存通用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ConvertToJson``1(``0)">
            <summary>
            Redis转String
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ConvertToObj``1(StackExchange.Redis.RedisValue)">
            <summary>
            Redis值转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ConvertList``1(StackExchange.Redis.RedisValue[])">
            <summary>
            Redis值数组转list集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ConvertRedisKeys(System.Collections.Generic.List{System.String})">
            <summary>
            集合转key
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            单个保存
            </summary>
            <param name="key"></param>
            <param name="val">值</param>
            <param name="exp">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringGet(System.String)">
            <summary>
            获取单个
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringGet``1(System.String)">
            <summary>
            获取单个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            异步保存单个
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            异步保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringGetAsync(System.String)">
            <summary>
            异步获取单个
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.StringGetAsync``1(System.String)">
            <summary>
            异步获取单个对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyDelete(System.String)">
            <summary>
            删除单个Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyRename(System.String,System.String)">
            <summary>
            重命名Key
            </summary>
            <param name="key">old key name</param>
            <param name="newKey">new key name</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyDeleteAsync(System.String)">
            <summary>
            异步删除单个key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyDeleteAsync(System.Collections.Generic.List{System.String})">
            <summary>
            异步删除多个Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyRenameAsync(System.String,System.String)">
            <summary>
             异步重命名Key
            </summary>
            <param name="key">old key name</param>
            <param name="newKey">new key name</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.KeyExpireAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            异步设置Key的时间
            </summary>
            <param name="key"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRemove``1(System.String,``0)">
            <summary>
            移除List内部指定的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRange``1(System.String)">
            <summary>
            获取指定Key的List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRightPush``1(System.String,``0)">
            <summary>
            插入（入队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRightPop``1(System.String)">
            <summary>
            取出（出队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.GetListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRemoveAsync``1(System.String,``0)">
            <summary>
            异步移除List内部指定的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRangeAsync``1(System.String)">
            <summary>
            异步获取指定Key的List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRightPushAsync``1(System.String,``0)">
            <summary>
            异步插入（入队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListRightPopAsync``1(System.String)">
            <summary>
            异步取出（出队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            异步入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.ListLeftPopAsync``1(System.String)">
            <summary>
            异步出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.GetListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetAdd(System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetLength(System.String)">
            <summary>
            获取长度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetContains(System.String,System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetRemove(System.String,System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetAddAsync(System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetLengthAsync(System.String)">
            <summary>
            获取长度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetContainsAsync(System.String,System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SetRemoveAsync(System.String,System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashExists(System.String,System.String)">
            <summary>
            是否被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashDelete(System.String,System.String)">
            <summary>
            从hash表中移除数据
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashRemove(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashGet``1(System.String,System.String)">
            <summary>
            从hash表中获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashExistsAsync(System.String,System.String)">
            <summary>
            异步是否被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            异步存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashDeleteAsync(System.String,System.String)">
            <summary>
            异步从hash表中移除数据
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashRemoveAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            异步移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashGetAsync``1(System.String,System.String)">
            <summary>
            从hash表中获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            无序添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetLength(System.String)">
            <summary>
             获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            异步无序添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RedisCache.RedisCaches.SortedSetLengthAsync(System.String)">
            <summary>
             获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.Cache">
            <summary>
            MemoryCaches
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.GetKeys``1">
            <summary>
            获取所有Key
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.AddCache``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <param name="Value"></param>
            <param name="Time"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.GetCache``1(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.RemoveCache(System.String)">
            <summary>
            删除指定缓存
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.RemoveAllCache">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.CommunicationModule">
            <summary>
            通信实例模块
            </summary>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.CommunicationModule.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.ICommunication">
            <summary>
            通信
            </summary>
        </member>
        <member name="E:XExten.Advance.CommunicationFramework.ICommunication.Received">
            <summary>
            数据接收事件
            </summary>
        </member>
        <member name="E:XExten.Advance.CommunicationFramework.ICommunication.Error">
            <summary>
            异常事件
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.ICommunication.IsConnected">
            <summary>
            是否连接成功
            </summary>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.ICommunication.Connect(XExten.Advance.CommunicationFramework.Model.CommunicationParams)">
            <summary>
            打开链接
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.ICommunication.SendCommand(System.Byte[],System.Boolean)">
            <summary>
            发送指令
            </summary>
            <param name="cmd"></param>
            <param name="DisposeReceived">是否丢弃数据</param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.ICommunication.SendCommandAsync(System.Byte[],System.Boolean)">
            <summary>
            发送指令
            </summary>
            <param name="cmd"></param>
            <param name="DisposeReceived">是否丢弃数据</param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.ICommunication.Close">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.IServerCommunication">
            <summary>
            TCP服务端
            </summary>
        </member>
        <member name="E:XExten.Advance.CommunicationFramework.IServerCommunication.Received">
            <summary>
            数据接收事件
            </summary>
        </member>
        <member name="E:XExten.Advance.CommunicationFramework.IServerCommunication.Error">
            <summary>
            异常事件
            </summary>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.IServerCommunication.Start(System.String,System.Int32,System.Int32)">
            <summary>
            启动
            </summary>
            <param name="ip">ip</param>
            <param name="port">port</param>
            <param name="dataSize">接受的数据大小</param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.IServerCommunication.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.IServerCommunication.SendAll(System.Byte[])">
            <summary>
            广播消息
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.IServerCommunication.Send(System.Guid,System.Byte[])">
            <summary>
            对指定客户端发送消息
            </summary>
            <param name="clientId">客服端id</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.IServerCommunication.RemoveSession(System.Guid)">
            <summary>
            删除指定的客服端会话
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="M:XExten.Advance.CommunicationFramework.IServerCommunication.ClearSession">
            <summary>
            清空所有会话
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.Model.CommunicationEnum">
            <summary>
            通信实例
            </summary>
        </member>
        <member name="F:XExten.Advance.CommunicationFramework.Model.CommunicationEnum.COM">
            <summary>
            串口
            </summary>
        </member>
        <member name="F:XExten.Advance.CommunicationFramework.Model.CommunicationEnum.TCP">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:XExten.Advance.CommunicationFramework.Model.CommunicationEnum.UDP">
            <summary>
            UDP
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.Model.CommunicationParams">
            <summary>
            连接参数
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.Host">
            <summary>
            COM口/IP
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.BindPort">
            <summary>
            绑定端口
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.Parity">
            <summary>
            奇偶校验
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.DataBits">
            <summary>
            数据位
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.StopBits">
            <summary>
            启停位
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.BaudRate">
            <summary>
            波特率
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.ConnectTimeout">
            <summary>
            连接超时(ms)
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.SendTimeout">
            <summary>
            发送超时(ms)
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.ReplayTimeout">
            <summary>
            回复超时(ms)
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.ReceiveBufferSize">
            <summary>
            接受数据大小
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.LogHead">
            <summary>
            日志头
            </summary>
        </member>
        <member name="P:XExten.Advance.CommunicationFramework.Model.CommunicationParams.IsDecodeWriteLog">
            <summary>
            解码数据写日志
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.Model.ServerCommunicationParams">
            <summary>
            服务配置参数
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.SerialCommunication">
            <summary>
            串口通信
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.TcpCommunication">
            <summary>
            Tcp通信
            </summary>
        </member>
        <member name="T:XExten.Advance.CommunicationFramework.UdpCommunication">
            <summary>
            Udp通信
            </summary>
        </member>
        <member name="T:XExten.Advance.EventFramework.EventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:XExten.Advance.EventFramework.EventBus.Lancher(System.Reflection.Assembly[])">
            <summary>
            初始化加载
            </summary>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="P:XExten.Advance.EventFramework.EventExcutor.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:XExten.Advance.EventFramework.EventExcutor.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="M:XExten.Advance.EventFramework.EventExcutor.ShouldRun(System.String)">
            <summary>
            是否符合条件执行处理程序
            </summary>
            <param name="eventId">事件 Id</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:XExten.Advance.EventFramework.EventSources.IEventSource">
            <summary>
            事件源
            </summary>
        </member>
        <member name="P:XExten.Advance.EventFramework.EventSources.IEventSource.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XExten.Advance.EventFramework.EventSources.IEventSource.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XExten.Advance.EventFramework.EventSources.IEventSource.Payload">
            <summary>
            载体 
            </summary>
        </member>
        <member name="T:XExten.Advance.EventFramework.PublishEvent.IEventPublish">
            <summary>
            发布者
            </summary>
        </member>
        <member name="P:XExten.Advance.EventFramework.PublishEvent.IEventPublish.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:XExten.Advance.EventFramework.PublishEvent.IEventPublish.PublishAsync(System.Action{XExten.Advance.EventFramework.EventSources.IEventSource})">
            <summary>
            发布
            </summary>
            <param name="source"></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:XExten.Advance.EventFramework.PublishEvent.IEventPublish.DelayPublishAsync(System.Action{XExten.Advance.EventFramework.EventSources.IEventSource},System.Int64)">
            <summary>
            延迟发布
            </summary>
            <param name="source"></param>
            <param name="delay">毫秒</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:XExten.Advance.EventFramework.SubscriptEvent.EventSubscribeAttribute">
            <summary>
            订阅者
            </summary>
        </member>
        <member name="P:XExten.Advance.EventFramework.SubscriptEvent.EventSubscribeAttribute.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="M:XExten.Advance.EventFramework.SubscriptEvent.EventSubscribeAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="EventId"></param>
        </member>
        <member name="T:XExten.Advance.EventFramework.SubscriptEvent.IEventSubscriber">
            <summary>
            订阅者标识接口
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpEvent">
            <summary>
            事件中心
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpEvent.HttpActionEvent">
            <summary>
            请求异常事件
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpEvent.RestActionEvent">
            <summary>
            请求异常事件
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Email.EmailSetting">
            <summary>
            邮箱配置
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSetting.SmtpHost">
            <summary>
            邮箱地址
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSetting.EmailAccount">
            <summary>
            邮箱账号
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSetting.EmailPassWord">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Email.EmailSetting.SetOption(System.String,System.String,System.String)">
            <summary>
            设置
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Email.EmailUtile">
            <summary>
            邮箱工具类
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Email.EmailUtile.SendMail(XExten.Advance.InternalFramework.Email.EmailViewModel)">
            <summary>
             发送邮件
            </summary>
            <param name="View"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Email.EmailViewModel">
            <summary>
            邮箱内容
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailViewModel.AcceptedAddress">
            <summary>
            收件人邮箱
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailViewModel.Title">
            <summary>
            发送标题
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailViewModel.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Express.Common.QType">
             <summary>
            
             </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.NotLike">
            <summary>
            NotLike
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.Equals">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.NotEquals">
            <summary>
            NotEquals
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.GreaterThan">
            <summary>
            GreaterThan
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.GreaterThanOrEqual">
            <summary>
            GreaterThanOrEqual
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.LessThan">
            <summary>
            LessThan
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.LessThanOrEqual">
            <summary>
            LessThanOrEqual
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.SetProptertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            设置属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.GetExpression``1(System.String[])">
            <summary>
             返回一个new表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.GetExpression``1(System.String,System.Object,XExten.Advance.InternalFramework.Express.Common.QType)">
            <summary>
             返回一个bool表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne AND ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne or ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.InternalFramework.FileWatch.FileModule">
            <summary>
            文件模式
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Pattern">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.IsInclude">
            <summary>
            是否包含文件夹
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Module">
            <summary>
            false 只是监听文件,true 监听并读取
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Action">
            <summary>
            监听并读取
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Events">
            <summary>
            监听文件
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.FileWatch.FileMonitor">
            <summary>
            文件监听
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.FileWatch.FileMonitor.MonitorRead(XExten.Advance.InternalFramework.FileWatch.FileModule)">
            <summary>
            文件监听(读取)
            </summary>
            <param name="Module"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.FileWatch.FileMonitor.MonitorInit(XExten.Advance.InternalFramework.FileWatch.FileModule)">
            <summary>
            文件监听(不读取)
            </summary>
            <param name="Module"></param>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Office.Common.ExcelBoolType">
            <summary>
            bool类型映射值
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Office.Common.ExcelBoolType.TRUE">
            <summary>
            是
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Office.Common.ExcelBoolType.FALSE">
            <summary>
            否
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Office.Common.ExcelType">
            <summary>
            Excel 类型
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Office.Common.ExcelType.xls">
            <summary>
            Excel2003
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Office.Common.ExcelType.xlsx">
            <summary>
            Excel2007+
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Office.Common.OfficeAttribute">
            <summary>
            文档特性
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Office.Common.OfficeAttribute.IngoreField">
            <summary>
            忽略导出
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Office.Common.OfficeAttribute.MapperField">
            <summary>
            映射字段
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Office.Common.OfficeAttribute.BoolEnum">
            <summary>
            bool类型映射枚举
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Office.Common.OfficeAttribute.Enum">
            <summary>
            是否枚举
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.GetWorkbook">
            <summary>
            获取工作薄
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.GetSheet">
            <summary>
            获取工作表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.GetRow">
            <summary>
            获取行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.GetCell">
            <summary>
            获取列
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.#ctor(XExten.Advance.InternalFramework.Office.Common.ExcelType,System.String)">
            <summary>
            导出构造
            </summary>
            <param name="type"></param>
            <param name="Format"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateExportWorkBook">
            <summary>
            创建工作薄
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateExportSheet(System.String)">
            <summary>
            创建工作表
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateExportRows(System.Int32)">
            <summary>
            创建行
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateExportCells(System.Int32,System.Object)">
            <summary>
            创建单元格
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.HeadExportStyle(System.Int32)">
            <summary>
            表头样式
            </summary>
            <param name="EndCol"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.BodyExportStyle(System.Int32,System.Int32)">
            <summary>
            内容样式
            </summary>
            <param name="EndRow"></param>
            <param name="EndCol"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.FootExportStyle(System.Int32,System.Int32)">
            <summary>
            页脚样式
            </summary>
            <param name="EndRow"></param>
            <param name="EndCol"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.MergeExportCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="SRI">起始行</param>
            <param name="ERI">结束行</param>
            <param name="SCI">起始列</param>
            <param name="ECI">结束列</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.WriteExportStream(System.IO.Stream,System.Action{System.IO.Stream})">
            <summary>
             写入文件流
            </summary>
            <param name="st"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.#ctor(System.IO.Stream,XExten.Advance.InternalFramework.Office.Common.ExcelType,System.Boolean)">
            <summary>
            导入构造
            </summary>
            <param name="st"></param>
            <param name="type"></param>
            <param name="HasPageFooter"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateImportWorkBook">
            <summary>
            创建导入工作薄
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateImportSheet(System.Int32)">
            <summary>
            获取导入的工作表
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateImportHead``1">
            <summary>
            获取导入表格头
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CreateImportBody``1">
            <summary>
            创建导入内容
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.CheckWorkBook">
            <summary>
            检查工作薄是否被创建
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.SetBorderColor(NPOI.SS.UserModel.ICellStyle,System.Boolean)">
            <summary>
            创建边框颜色
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.SetAlignment(NPOI.SS.UserModel.ICellStyle)">
            <summary>
            创建布局方式
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.SetBorder(NPOI.SS.UserModel.ICellStyle)">
            <summary>
            创建边框
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.SetFont(NPOI.SS.UserModel.ICellStyle,System.Boolean)">
            <summary>
            设置字体
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.Excel.SetStyle(System.Int32,System.Int32,System.Int32,System.Int32,NPOI.SS.UserModel.ICellStyle)">
            <summary>
            为当前行设置样式
            </summary>
            <param name="StartRowIndex">起始行索引</param>
            <param name="EndRowIndex">结束行索引</param>
            <param name="StartColIndex">起始列索引</param>
            <param name="EndColIndex">结束列索引</param>
            <param name="Style">单元格样式</param>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Office.ExcelFactory">
            <summary>
            Excel工厂
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.ExcelFactory.ExportExcel``1(System.Collections.Generic.IEnumerable{``0},XExten.Advance.InternalFramework.Office.Common.ExcelType,System.String,System.Action{System.IO.Stream},System.Object,System.IO.Stream,System.String)">
            <summary>
            导出EXCEL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Data">需要被导出的数据</param>
            <param name="Types">Excel类型</param>
            <param name="SheetName">工作表名称</param>
            <param name="action">自定义导出</param>
            <param name="stream">流</param>
            <param name="Footer">页脚内容</param>
            <param name="DateFormat">事件格式</param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.ExcelFactory.ImportExcel``1(System.IO.Stream,XExten.Advance.InternalFramework.Office.Common.ExcelType,System.Boolean,System.Int32)">
            <summary>
            导入EXCEL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">流</param>
            <param name="Types">类型</param>
            <param name="HasPageFooter">文档是否有页脚</param>
            <param name="SheetIndex">数据表索引</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.ExcelFactory.GetDatas(System.Reflection.PropertyInfo)">
            <summary>
            获取下拉值映射
            </summary>
            <param name="Info"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.ExcelFactory.CreateDropDwonListForXLSX(NPOI.XSSF.UserModel.XSSFSheet,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            EXCEL2007下拉值
            </summary>
            <param name="sheet"></param>
            <param name="data"></param>
            <param name="StarCol"></param>
            <param name="EndCol"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.ExcelFactory.CreateDropDwonListForXLS(NPOI.HSSF.UserModel.HSSFSheet,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            EXCEL2003下拉值
            </summary>
            <param name="sheet"></param>
            <param name="data"></param>
            <param name="StarCol"></param>
            <param name="EndCol"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Office.ExcelFactory.CreateDropDwonData(XExten.Advance.InternalFramework.Office.Excel,XExten.Advance.InternalFramework.Office.Common.ExcelType,System.Reflection.PropertyInfo,System.Int32,System.Int32)">
            <summary>
            创建下拉值
            </summary>
            <param name="excel"></param>
            <param name="type"></param>
            <param name="info"></param>
            <param name="StarCol"></param>
            <param name="EndCol"></param>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Securities.Common.SecurityType">
            <summary>
            加解密类型
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Securities.Common.SecurityType.Base64">
            <summary>
            Base64
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Securities.Common.SecurityType.UTF16">
            <summary>
            UTF16
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Securities.Common.SecurityType.EncodedURI">
            <summary>
            EncodedURI
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Securities.Common.SecurityType.Uint8">
            <summary>
            Uint8
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Securities.Common.SecurityType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Securities.Md5">
            <summary>
            md5
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Securities.Md5.Md5By32(System.String)">
            <summary>
            32bit
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Securities.Md5.Md5By16(System.String)">
            <summary>
            16bit
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Securities.RSAGenerate.GenerateKey(System.String,System.Int32)">
            <summary>
            生成RSA私钥和公钥
            </summary>
            <param name="savePath"></param>
            <param name="multiple"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Securities.RSAGenerate.RSAEncrypt(System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Securities.RSAGenerate.RSADecrypt(System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Translate.Translation">
            <summary>
            翻译
            </summary>
        </member>
        <member name="T:XExten.Advance.IocFramework.IocDependency">
            <summary>
            Ioc
            </summary>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Register``2(System.Int32)">
            <summary>
             注册
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="Module">1 瞬时 2 单例 3 作用域</param>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.RegisterByNamed``2(System.Object,System.Int32)">
            <summary>
            根据关键字注册
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="Name"></param>
            <param name="Module">1 瞬时 2 单例 3 作用域</param>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Register(System.Type,System.Type,System.Int32)">
            <summary>
             注册
            </summary>
            <param name="serviceType"></param>
            <param name="implementationType"></param>
            <param name="Module">1 瞬时 2 单例 3 作用域</param>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.RegisterByNamed(System.Type,System.Type,System.Object,System.Int32)">
            <summary>
            根据关键字注册
            </summary>
            <param name="serviceType"></param>
            <param name="implementationType"></param>
            <param name="Name"></param>
            <param name="Module">1 瞬时 2 单例 3 作用域</param>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Register(System.Type,System.Int32)">
            <summary>
             注册
            </summary>
            <param name="serviceType"></param>
            <param name="Module">1 瞬时 2 单例 3 作用域</param>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.RegisterByNamed(System.Type,System.Object,System.Int32)">
            <summary>
            根据关键字注册
            </summary>
            <param name="serviceType"></param>
            <param name="Name"></param>
            <param name="Module">1 瞬时 2 单例 3 作用域</param>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Resolve``1">
            <summary>
            取出实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.ResolveByNamed``1(System.Object)">
            <summary>
            取出实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Resolves``1">
            <summary>
            取出实例集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.ResolvesByNamed``1(System.Object)">
            <summary>
            取出实例集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Resolve(System.Type)">
            <summary>
            取出实例
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.ResolveByNamed(System.Type,System.Object)">
            <summary>
            取出实例
            </summary>
            <param name="serviceType"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.Resolves(System.Type)">
            <summary>
            取出实例集合
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.ResolvesByNamed(System.Type,System.Object)">
            <summary>
            取出实例集合
            </summary>
            <param name="serviceType"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.IsExistsByNamed``1(System.Object)">
            <summary>
            判断实例是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.IsExistsByNamed(System.Type,System.Object)">
            <summary>
            判断实例是否存在
            </summary>
            <param name="serviceType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.IsExists``1">
            <summary>
            判断实例是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.IocFramework.IocDependency.IsExists(System.Type)">
            <summary>
            判断实例是否存在
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.JsonDbFramework.JsonDbContext">
            <summary>
            JsonDb上下文
            </summary>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="DbFile"></param>
            <param name="LoadOnce"></param>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbContext.RuntimeLoad``1">
            <summary>
            实时数据到内存
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbContext.LoadInMemory``1">
            <summary>
            加载数据到内存
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbContext.SaveChange``1">
            <summary>
            保存数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbContext.SaveChange">
            <summary>
            保存数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbContext.SaveChange(System.Action{System.String,System.String})">
            <summary>
            保存数据
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XExten.Advance.JsonDbFramework.JsonDbHandle`1">
            <summary>
            JsonDb执行器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.#ctor(System.Collections.Generic.List{`0},XExten.Advance.JsonDbFramework.JsonDbContext)">
            <summary>
            构造
            </summary>
            <param name="Json"></param>
            <param name="DbContext"></param>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.SetColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            设置值
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.WhereIF(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断条件
            </summary>
            <param name="Condition"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            单个
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.Insert(`0)">
            <summary>
            插入
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            多条插入
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.Delete(`0)">
            <summary>
            删除单个
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.GetAll">
            <summary>
            全集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.ExcuteDelete">
            <summary>
            执行删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.ExuteInsert">
            <summary>
            执行插入
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.JsonDbFramework.JsonDbHandle`1.ExcuteUpdate">
            <summary>
            执行更新
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:XExten.Advance.LinqFramework.SyncLinq">
            <summary>
            LinqExtension
            </summary>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsInt(System.String)">
            <summary>
            To Int
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsFloat(System.String)">
            <summary>
            To Float
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDouble(System.String)">
            <summary>
            To Double
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsLong(System.String)">
            <summary>
            To Long
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDateTime(System.String)">
            <summary>
            To DateTime
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsString(System.Object)">
            <summary>
            To String
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBool(System.String)">
            <summary>
            To Bool
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBool(System.Int32)">
            <summary>
            To Bool
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDecimal(System.String)">
            <summary>
            To Decimal
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsOkJson(System.String)">
            <summary>
            将错误的JSON转为正确结果
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsIntAsync(System.String)">
            <summary>
            To Int
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsFloatAsync(System.String)">
            <summary>
            To Float
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDoubleAsync(System.String)">
            <summary>
            To Double
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsLongAsync(System.String)">
            <summary>
            To Long
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDateTimeAsync(System.String)">
            <summary>
            To DateTime
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsStringAsync(System.Object)">
            <summary>
            To String
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBoolAsync(System.String)">
            <summary>
            To Bool
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBoolAsync(System.Int32)">
            <summary>
            To Bool
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDecimalAsync(System.String)">
            <summary>
            To Decimal
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsOkJsonAsync(System.String)">
            <summary>
            将错误的JSON转为正确结果
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUri``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            将实体转为URL参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="MapFied"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUri(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            将键值对转为URL参数
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByBytes(System.String)">
            <summary>
            Encoding获取流
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByString(System.Byte[])">
            <summary>
            Encoding获取字符串
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUriAsync``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            将实体转为URL参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="MapFied"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUriAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            将键值对转为URL参数
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsNullOrEmpty(System.String)">
             <summary>
            检查字符
             </summary>
             <param name="param"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检查集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.Is18IDCard(System.String)">
            <summary>
            是否身份证
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.Is15IDCard(System.String)">
            <summary>
            是否身份证
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsPhone(System.String)">
            <summary>
            验证手机号
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsRegex(System.String,System.String)">
            <summary>
            正则表达式验证
            </summary>
            <param name="param"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsNullOrEmptyAsync(System.String)">
             <summary>
            检查字符
             </summary>
             <param name="param"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsNullOrEmptyAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检查集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.Is18IDCardAsync(System.String)">
            <summary>
            是否身份证
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.Is15IDCardAsync(System.String)">
            <summary>
            是否身份证
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsPhoneAsync(System.String)">
            <summary>
            验证手机号
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsRegexAsync(System.String,System.String)">
            <summary>
            正则表达式验证
            </summary>
            <param name="param"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForDicEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            遍历字典
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForDicEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1,System.Int32})">
            <summary>
            遍历字典
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForArrayEach``1(System.Array,System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForArrayEach``1(System.Array,System.Action{``0,System.Int32})">
            <summary>
            遍历数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForEnumerEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForEnumerEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForDicEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            遍历字典
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForDicEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1,System.Int32})">
            <summary>
            遍历字典
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForArrayEachAsync``1(System.Array,System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForArrayEachAsync``1(System.Array,System.Action{``0,System.Int32})">
            <summary>
            遍历数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForEnumerEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForEnumerEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne AND ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne or ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToRod(System.Decimal,System.Int32)">
             <summary>
            保留小数非四舍五入
             </summary>
             <param name="param"></param>
             <param name="parrent"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMd5(System.String,System.Int32)">
            <summary>
            Md5
            </summary>
            <param name="param"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToFmtDate(System.DateTime,System.Int32,System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="param"></param>
            <param name="fmtType">
            0 : default
            1 : yyyy-MM-dd HH:mm:ss:ffff
            2 : yyyy年MM月dd日
            </param>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToEntity``1(System.Data.DataTable)">
            <summary>
            DataTable 2 Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJson``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToBytes``1(``0,System.Boolean)">
            <summary>
            序列化对象MsgPack
            </summary>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJsonLight(System.Byte[],System.Boolean)">
            <summary>
            序列化Bytes为Json
            </summary>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModelLight``1(System.Byte[],System.Boolean)">
            <summary>
            反序列化对象MsgPack
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModel``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDes(System.Enum)">
            <summary>
            返回指定的枚举描述值
            </summary>
            <param name="Param"></param>
            <returns>枚举描叙</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDes``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToAttr``2(``0,System.String,System.Boolean)">
            <summary>
            获取指定字段的Attribute
            </summary>
            <typeparam name="TSource">指定实体</typeparam>
            <typeparam name="TAttribute">特性</typeparam>
            <param name="Param">指定实体</param>
            <param name="FieldName">字段名</param>
            <param name="IsProperty">是否获取属性</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToTables``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper``1(System.Object)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper(System.Object,System.Type)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper``2(System.Object)">
            <summary>
            映射集合
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper(System.Object,System.Type,System.Type,System.Type)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapest``1(System.Object,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapest(System.Object,System.Type,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="destinationType"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToRandom``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            随机数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToFactor``1(System.Collections.Generic.List{``0},System.Double)">
            <summary>
            根据系数间隔获取集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDisorder``1(System.Collections.Generic.List{``0})">
            <summary>
            乱序列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToRodAsync(System.Decimal,System.Int32)">
             <summary>
            保留小数非四舍五入
             </summary>
             <param name="param"></param>
             <param name="parrent"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMd5Async(System.String,System.Int32)">
            <summary>
            Md5
            </summary>
            <param name="param"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToFmtDateAsync(System.DateTime,System.Int32,System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="param"></param>
            <param name="fmtType">
            0 : default
            1 : yyyy-MM-dd HH:mm:ss:ffff
            2 : yyyy年MM月dd日
            </param>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToEntityAsync``1(System.Data.DataTable)">
            <summary>
            DataTable 2 Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJsonAsync``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToBytesAsync``1(``0,System.Boolean)">
            <summary>
            序列化对象MsgPack
            </summary>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJsonLightAsync(System.Byte[],System.Boolean)">
            <summary>
            序列化Bytes为Json
            </summary>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModelLightAsync``1(System.Byte[],System.Boolean)">
            <summary>
            反序列化对象MsgPack
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModelAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDesAsync(System.Enum)">
            <summary>
            返回指定的枚举描述值
            </summary>
            <param name="param"></param>
            <returns>枚举描叙</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToAttrAsync``2(``0,System.String,System.Boolean)">
            <summary>
            获取指定字段的Attribute
            </summary>
            <typeparam name="TSource">指定实体</typeparam>
            <typeparam name="TAttribute">特性</typeparam>
            <param name="Param">指定实体</param>
            <param name="FieldName">字段名</param>
            <param name="IsProperty">是否获取属性</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToTablesAsync``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync``1(System.Object)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync(System.Object,System.Type)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync``2(System.Object)">
            <summary>
            映射集合
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync(System.Object,System.Type,System.Type,System.Type)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapestAsync``1(System.Object,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapestAsync(System.Object,System.Type,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="destinationType"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToRandomAsync``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            随机数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToFactorAsync``1(System.Collections.Generic.List{``0},System.Double)">
            <summary>
            根据系数间隔获取集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDisorderAsync``1(System.Collections.Generic.List{``0})">
            <summary>
            乱序列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithByteHex(System.Byte[])">
            <summary>
            Bytes转hex
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithHexByte(System.String)">
            <summary>
            hex转bytes
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithNames``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回实体中所有的字段名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithKeyValue``1(``0)">
            <summary>
            返回一个实体中所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithRegex(System.String,System.String)">
            <summary>
            正则匹配
            </summary>
            <param name="param"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithRegexReplace(System.String,System.String,System.String)">
            <summary>
            正则替换
            </summary>
            <param name="param"></param>
            <param name="pattern"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithByteHexAsync(System.Byte[])">
            <summary>
            Bytes转hex
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithHexByteAsync(System.String)">
            <summary>
            hex转bytes
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithNamesAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回实体中所有的字段名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithKeyValueAsync``1(``0)">
            <summary>
            返回一个实体中所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithRegexAsync(System.String,System.String)">
            <summary>
            正则匹配
            </summary>
            <param name="param"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithRegexReplaceAsync(System.String,System.String,System.String)">
            <summary>
            正则替换
            </summary>
            <param name="param"></param>
            <param name="pattern"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.LogFramework.XLog">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:XExten.Advance.LogFramework.XLog.RegisetLog">
            <summary>
            注册日志框架
            </summary>
        </member>
        <member name="M:XExten.Advance.LogFramework.XLog.Debug(System.String,System.String,System.String,System.Int32)">
            <summary>
            调试
            </summary>
            <param name="info"></param>
            <param name="method"></param>
            <param name="classes"></param>
            <param name="line"></param>
        </member>
        <member name="M:XExten.Advance.LogFramework.XLog.Info(System.String,System.String,System.String,System.Int32)">
            <summary>
            信息
            </summary>
            <param name="info"></param>
            <param name="method"></param>
            <param name="classes"></param>
            <param name="line"></param>
        </member>
        <member name="M:XExten.Advance.LogFramework.XLog.Warn(System.String,System.String,System.String,System.Int32)">
            <summary>
            警告
            </summary>
            <param name="info"></param>
            <param name="method"></param>
            <param name="classes"></param>
            <param name="line"></param>
        </member>
        <member name="M:XExten.Advance.LogFramework.XLog.Error(System.String,System.String,System.String,System.Int32)">
            <summary>
            错误
            </summary>
            <param name="info"></param>
            <param name="method"></param>
            <param name="classes"></param>
            <param name="line"></param>
        </member>
        <member name="M:XExten.Advance.LogFramework.XLog.Fatal(System.Exception,System.String,System.String,System.String,System.Int32)">
            <summary>
            致命
            </summary>
            <param name="ex"></param>
            <param name="info"></param>
            <param name="method"></param>
            <param name="classes"></param>
            <param name="line"></param>
        </member>
        <member name="T:XExten.Advance.NetFramework.ConstDefault">
            <summary>
            头常量
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.UserAgentValue">
            <summary>
            UserAgentValue
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.UserAgentValueAndroid">
             <summary>
            UserAgentValueAndroid
             </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.UserAgentValueIPhone">
            <summary>
            UserAgentValueIPhone
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.UserAgent">
            <summary>
            UserAgent
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.Referer">
            <summary>
            Referer
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.Host">
            <summary>
            Hot
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.AcceptEncoding">
            <summary>
            AcceptEncoding
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.Origin">
            <summary>
            Origin
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.Authorization">
            <summary>
            Authorization
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.Accept">
            <summary>
            Accept
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.ContentType">
            <summary>
            ContentType
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.AcceptLanguage">
            <summary>
            AcceptLanguage
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.ConstDefault.Cookie">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Enums.Category">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Category.None">
            <summary>
            空
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Category.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Category.Form">
            <summary>
            表单
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Enums.ImpMode">
            <summary>
            获取实现方法
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.ImpMode.None">
            <summary>
            随机
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.ImpMode.Http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.ImpMode.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Enums.Method">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Method.GET">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Method.POST">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Method.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Method.PUT">
            <summary>
            PUT
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Enums.Platform">
            <summary>
            平台
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Platform.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Platform.IOS">
            <summary>
            IOS
            </summary>
        </member>
        <member name="F:XExten.Advance.NetFramework.Enums.Platform.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.INetFactory">
            <summary>
            网络请求工厂
            </summary>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddProxy(System.String,System.Int32)">
            <summary>
            添加代理
            </summary>
            <param name="IP"></param>
            <param name="Port"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddWhreProxy(System.Boolean,System.String,System.Int32)">
            <summary>
             添加代理
            </summary>
            <param name="condition"></param>
            <param name="IP"></param>
            <param name="Port"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddNode(System.Action{XExten.Advance.NetFramework.Options.DefaultNodes})">
            <summary>
            添加请求地址
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddWhereNode(System.Boolean,System.Action{XExten.Advance.NetFramework.Options.DefaultNodes})">
            <summary>
            添加请求地址
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddNode(System.Collections.Generic.List{XExten.Advance.NetFramework.Options.DefaultNodes})">
            <summary>
            添加请求地址
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddWhereNode(System.Boolean,System.Collections.Generic.List{XExten.Advance.NetFramework.Options.DefaultNodes})">
            <summary>
            添加请求地址
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddHeader(System.Action{XExten.Advance.NetFramework.Options.DefaultHeader})">
            <summary>
            添加请求头
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddHeader(System.Collections.Generic.List{XExten.Advance.NetFramework.Options.DefaultHeader})">
            <summary>
            添加请求头
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddWhereHeader(System.Boolean,System.Collections.Generic.List{XExten.Advance.NetFramework.Options.DefaultHeader})">
            <summary>
            添加请求头
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddWhereHeader(System.Boolean,System.Action{XExten.Advance.NetFramework.Options.DefaultHeader})">
            <summary>
            添加请求头
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.AddCookie(System.Action{XExten.Advance.NetFramework.Options.DefaultCookie})">
            <summary>
            添加认证
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.SetBaseUri(System.String)">
            <summary>
            设置顶级Uri
            </summary>
            <param name="Uri"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.Build(System.Action{XExten.Advance.NetFramework.Options.DefaultBuilder})">
            <summary>
            构建请求
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.GetCookie(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            获取Cookie
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.RunBytes">
            <summary>
            返回Bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.RunString">
            <summary>
            返回字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.INetFactory.RunStream">
            <summary>
            返回流
            </summary>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.NetFramework.NetFactoryExtension">
            <summary>
            网络请求
            </summary>
        </member>
        <member name="M:XExten.Advance.NetFramework.NetFactoryExtension.RegisterNetFramework(System.Int32,XExten.Advance.NetFramework.Enums.Platform)">
            <summary>
            注入限定类
            </summary>
            <param name="Lifespan">HttpClient生命周期 默认1秒钟</param>
            <param name="platform">使用平台</param>
        </member>
        <member name="M:XExten.Advance.NetFramework.NetFactoryExtension.Resolve``1(XExten.Advance.NetFramework.Enums.ImpMode)">
            <summary>
            限定获取实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.NetFramework.Options.DefaultBuilder">
            <summary>
            构建
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.UseBaseUri">
            <summary>
            使用顶级路径
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.UseCache">
            <summary>
            启用缓存节点
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.CacheSpan">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.Gzip">
            <summary>
            压缩
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.IgnoreHttps">
            <summary>
            https验证
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.UseCookie">
            <summary>
            启用认证
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.PlatformHeader">
            <summary>
            指定平台请求头
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultBuilder.DelDefHeader">
            <summary>
            是否清除默认平台Header
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Options.DefaultCookie">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultCookie.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultCookie.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultCookie.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Options.DefaultHeader">
            <summary>
            头
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultHeader.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultHeader.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Options.DefaultNodes">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.Node">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.Method">
            <summary>
            请求方法
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.Category">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.MapFied">
            <summary>
            字段映射
            </summary>
        </member>
        <member name="P:XExten.Advance.NetFramework.Options.DefaultNodes.Contents">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="T:XExten.Advance.NetFramework.Options.MultiKeyPairs">
            <summary>
            封装数据
            </summary>
        </member>
        <member name="M:XExten.Advance.NetFramework.Options.MultiKeyPairs.KeyValuePairs(System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个key-value格式的表单数据(Making form data to KeyValuePairs)
            </summary>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.Options.MultiKeyPairs.KeyValuePairs``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个key-value格式的表单数据(Making form data to KeyValuePairs)
            </summary>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.NetFramework.Options.MultiKeyPairs.RetrunEnumValue``1(System.Reflection.PropertyInfo,``0)">
            <summary>
            返回枚举值
            </summary>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.StaticFramework.SyncStatic">
            <summary>
            StaticUtile
            </summary>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ConvertBytesImage(System.Byte[],ImageMagick.MagickFormat)">
            <summary>
            将流转为指定图片流
            </summary>
            <param name="bytes"></param>
            <param name="magick"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.TryCatch(System.Action,System.Action{System.Exception},System.Action)">
            <summary>
            异常处理
            </summary>
            <param name="action"></param>
            <param name="ection"></param>
            <param name="final"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.TryCatch``1(System.Func{``0},System.Func{System.Exception,``0},System.Action)">
            <summary>
            异常处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="ection"></param>
            <param name="final"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.CHNPinYin(System.String,Chinese.PinyinFormat,Chinese.ChineseTypes)">
            <summary>
            获取中文拼音
            </summary>
            <param name="Chinese"></param>
            <param name="format"></param>
            <param name="chineseType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ReadXml(System.String,System.String,System.String)">
            <summary>
            读取Xml
            </summary>
            <param name="NodeItem"></param>
            <param name="NodeKey"></param>
            <param name="NodeValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ConvertStamptime(System.String)">
            <summary>
            时间戳转时间
            </summary>
            <param name="TimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ConvertDateTime(System.DateTime,System.Boolean)">
            <summary>
            时间转时间戳
            </summary>
            <param name="TimeStamp"></param>
            <param name="RtSecond">True 返回秒 False 返回毫秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.XmlSerializer``1(``0)">
            <summary>
            将对象序列化为XML(XmlSerializer)
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            (Description: This method serializes complex classes. If you do not declare features such as XmlInclude, you may get an error "Use the XmlInclude or SoapInclude feature to statically specify a non-known type.")
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.XmlDeserialize``1(System.String)">
            <summary>
            反系列化XML(XmlDeserialize)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Xml"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.Assembly(System.String)">
            <summary>
            获取指定的程序集
            </summary>
            <param name="AssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ExportExcel``1(System.Collections.Generic.IEnumerable{``0},XExten.Advance.InternalFramework.Office.Common.ExcelType,System.String,System.Action{System.IO.Stream},System.Object,System.IO.Stream,System.String)">
            <summary>
            导出EXCEL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Data">需要被导出的数据</param>
            <param name="Types">Excel类型</param>
            <param name="SheetName">工作表名称</param>
            <param name="stream">流</param>
            <param name="action">自定义导出</param>
            <param name="footer">页脚内容</param>
            <param name="DateFormat">时间格式</param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ImportExcel``1(System.IO.Stream,XExten.Advance.InternalFramework.Office.Common.ExcelType,System.Boolean,System.Int32)">
            <summary>
            导入EXCEL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">流</param>
            <param name="Types">类型</param>
            <param name="HasPageFooter">文档是否有页脚</param>
            <param name="SheetIndex">数据表索引</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.SetPropertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            设置属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.FileMonitors(XExten.Advance.InternalFramework.FileWatch.FileModule)">
            <summary>
            文件监听
            </summary>
            <param name="Module"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.GetExpression``1(System.String[])">
            <summary>
             返回一个new表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.GetExpression``1(System.String,System.Object,XExten.Advance.InternalFramework.Express.Common.QType)">
            <summary>
             返回一个bool表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DoRetryWait(System.Action,System.Action{System.Exception,System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            等待重试无返回
            </summary>
            <param name="action"></param>
            <param name="exhandle"></param>
            <param name="Times"></param>
            <param name="WaitSpan"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DoRetryWait``1(System.Func{``0},System.Action{System.Exception,System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            等待重试有返回
            </summary>
            <param name="action"></param>
            <param name="exhandle"></param>
            <param name="Times"></param>
            <param name="WaitSpan"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DoRetry(System.Action,System.Action{System.Exception,System.Int32,System.Int32},System.Int32)">
            <summary>
            无返回重试
            </summary>
            <param name="action"></param>
            <param name="exhandle"></param>
            <param name="Times"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DoRetry``1(System.Func{``0},System.Action{System.Exception,System.Int32,System.Int32},System.Int32)">
            <summary>
            有返回重试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="exhandle"></param>
            <param name="Times"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DoRetryBreak(System.Action,System.Action{System.Exception},System.Int32,System.Int32)">
            <summary>
            短路由无返回
            </summary>
            <param name="action"></param>
            <param name="exhandle"></param>
            <param name="Times"></param>
            <param name="Seconds"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DoRetryBreak``1(System.Func{``0},System.Action{System.Exception},System.Int32,System.Int32)">
            <summary>
            短路由有返回
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="exhandle"></param>
            <param name="Times"></param>
            <param name="Seconds"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.Compress(System.String,XExten.Advance.InternalFramework.Securities.Common.SecurityType)">
            <summary>
            lz加密
            </summary>
            <param name="input"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.Decompress(System.String,XExten.Advance.InternalFramework.Securities.Common.SecurityType)">
            <summary>
            lz解密
            </summary>
            <param name="input"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.CreateFile(System.String)">
            <summary>
            创建文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.CreateDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.CreateFull(System.String)">
            <summary>
            创建文件夹下文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DeleteFolder(System.String)">
            <summary>
            删除所有文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.DeleteDirFile(System.String,System.String[])">
            <summary>
            删除目录下所有文件
            </summary>
            <param name="path"></param>
            <param name="condition">保留文件排除条件</param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.WriteFile(System.Byte[],System.String)">
            <summary>
            写入文件
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.WriteDirFile(System.Byte[],System.String)">
            <summary>
            写入目录文件
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ReadFile(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.Translate(System.String,System.String,System.String)">
            <summary>
            翻译
            </summary>
            <param name="query"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.RegistAop``1">
            <summary>
            注册Aop代理
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.GenerateRSAKey(System.String,System.Int32)">
            <summary>
            创建RSAKey
            </summary>
            <param name="savePath"></param>
            <param name="multiple"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.RSA(System.String,System.Boolean)">
            <summary>
            RSA加解密
            </summary>
            <param name="input">输入的数据</param>
            <param name="type">0 表示解密 1表示加密</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.MultiOpenCheck">
             <summary>
            程序多开检测
             </summary>
             <returns></returns>
        </member>
        <member name="P:XExten.Advance.ThreadFramework.TaskModel.ThreadTask">
            <summary>
            线程
            </summary>
        </member>
        <member name="P:XExten.Advance.ThreadFramework.TaskModel.RunAsync">
            <summary>
            需要执行的代码
            </summary>
        </member>
        <member name="P:XExten.Advance.ThreadFramework.TaskModel.Run">
            <summary>
                    需要执行的代码
            </summary>
        </member>
        <member name="P:XExten.Advance.ThreadFramework.TaskModel.Token">
            <summary>
            取消
            </summary>
        </member>
        <member name="T:XExten.Advance.ThreadFramework.ThreadFactory">
            <summary>
            线程工厂
            </summary>
        </member>
        <member name="P:XExten.Advance.ThreadFramework.ThreadFactory.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="F:XExten.Advance.ThreadFramework.ThreadFactory.IsRestar">
            <summary>
            是否重启
            </summary>
        </member>
        <member name="M:XExten.Advance.ThreadFramework.ThreadFactory.StartWithRestart(System.Func{System.Threading.Tasks.Task},System.String,System.Action{System.Exception},System.Boolean)">
            <summary>
            启动任务
            </summary>
            <param name="action"></param>
            <param name="key"></param>
            <param name="err"></param>
            <param name="restart"></param>
        </member>
        <member name="M:XExten.Advance.ThreadFramework.ThreadFactory.StartWithRestart(System.Action,System.String,System.Action{System.Exception},System.Boolean)">
            <summary>
            启动任务
            </summary>
            <param name="action"></param>
            <param name="key"></param>
            <param name="err"></param>
            <param name="restart"></param>
        </member>
        <member name="M:XExten.Advance.ThreadFramework.ThreadFactory.GetTaskKey">
            <summary>
            获取所有的线程Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.ThreadFramework.ThreadFactory.StopTask(System.String)">
            <summary>
            停止指定任务
            </summary>
            <param name="key">任务名</param>
        </member>
        <member name="M:XExten.Advance.ThreadFramework.ThreadFactory.Dispose">
            <summary>
            释放所有线程资源
            </summary>
        </member>
        <member name="M:XExten.Advance.ThreadFramework.ThreadFactory.Dispose(System.String)">
            <summary>
            释放所有线程资源排除特定的线程
            </summary>
            <param name="excludeKey"></param>
        </member>
    </members>
</doc>
