<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XExten.Advance</name>
    </assembly>
    <members>
        <member name="T:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute">
            <summary>
            执行器
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.Before(System.String,System.String,System.String,System.Object[])">
            <summary>
            执行前
            </summary>
            <param name="methodName"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.AopBaseActionAttribute.After(System.String,System.String,System.String,System.Object)">
            <summary>
            执行后
            </summary>
            <param name="methodName"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.AopFramework.AopAttribute.InterceptorBaseAttribute">
            <summary>
            拦截器
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopAttribute.InterceptorBaseAttribute.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            执行器
            </summary>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.AopFramework.AopProxy">
            <summary>
            Aop
            </summary>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfRealize``2">
            <summary>
            以接口的性质创建代理
            </summary>
            <typeparam name="TProxyInterface"></typeparam>
            <typeparam name="TImplement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfInherit``1">
            <summary>
            以自身的性质创建代理
            </summary>
            <typeparam name="TProxyClass"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfRealize(System.Type,System.Type)">
            <summary>
            以接口的性质创建代理
            </summary>
            <param name="ProxyInterface"></param>
            <param name="Implement"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.AopFramework.AopProxy.CreateProxyOfInherit(System.Type)">
            <summary>
            以自身的性质创建代理
            </summary>
            <param name="ProxyClass"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.CacheFramework.Caches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.Advance.CacheFramework.Caches.Memory">
            <summary>
            memoryCache
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheSet``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheGet``1(System.Object)">
            <summary>
            获取Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheRemove(System.Object)">
            <summary>
             删除Memory缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheSetAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheGetAsync``1(System.Object)">
            <summary>
            获取Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.Caches.RunTimeCacheRemoveAsync(System.Object)">
            <summary>
             删除Memory缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches">
             <summary>
            
             </summary>
        </member>
        <member name="F:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.Cache">
            <summary>
            MemoryCaches
            </summary>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.AddCache``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <param name="Value"></param>
            <param name="Time"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.GetCache``1(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.CacheFramework.RunTimeCache.MemoryCaches.RemoveCache(System.String)">
            <summary>
            删除指定缓存
            </summary>
            <param name="Key"></param>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiCommon.MultiKeyPairs">
            <summary>
            封装数据
            </summary>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiCommon.MultiKeyPairs.KeyValuePairs(System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个key-value格式的表单数据(Making form data to KeyValuePairs)
            </summary>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiCommon.MultiKeyPairs.KeyValuePairs``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个key-value格式的表单数据(Making form data to KeyValuePairs)
            </summary>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiCommon.MultiKeyPairs.RetrunEnumValue``1(System.Reflection.PropertyInfo,``0)">
            <summary>
            返回枚举值
            </summary>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiCommon.MultiProxy">
            <summary>
            代理
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiCommon.MultiProxy.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiCommon.MultiProxy.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiCommon.MultiProxy.UserName">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiCommon.MultiProxy.PassWord">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiCommon.MultiType">
            <summary>
            RequestType
            </summary>
        </member>
        <member name="F:XExten.Advance.HttpFramework.MultiCommon.MultiType.POST">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:XExten.Advance.HttpFramework.MultiCommon.MultiType.GET">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:XExten.Advance.HttpFramework.MultiCommon.MultiType.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="F:XExten.Advance.HttpFramework.MultiCommon.MultiType.PUT">
            <summary>
            PUT
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient">
            <summary>
            Http
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.HttpMulti">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.InitWebProxy(System.Action{XExten.Advance.HttpFramework.MultiCommon.MultiProxy})">
            <summary>
            使用代理
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.InitWebProxy(XExten.Advance.HttpFramework.MultiCommon.MultiProxy)">
            <summary>
            使用代理
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.InitCookie">
            <summary>
            初始化Cookie
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.AddHeader(System.Action{XExten.Advance.HttpFramework.MultiOption.HeaderOption})">
            <summary>
            Header
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.AddCookie(System.Action{XExten.Advance.HttpFramework.MultiOption.CookieOption})">
            <summary>
            Cookie
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiFactory.IHttpMultiClient.AddNode(System.Action{XExten.Advance.HttpFramework.MultiOption.NodeOption})">
            <summary>
            Node
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.RunBytes(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            执行 bytes
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.RunBytesAsync(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            执行 bytes
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.RunString(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            执行 default UTF-8
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.RunStringAsync(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            执行 default UTF-8
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.RequestBytes(XExten.Advance.HttpFramework.MultiOption.NodeOption,System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            请求
            </summary>
            <param name="Item"></param>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.RequestString(XExten.Advance.HttpFramework.MultiOption.NodeOption,System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            请求
            </summary>
            <param name="Item"></param>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiImplement.Builders.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiInterface.IBuilders">
            <summary>
            builder
            </summary>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IBuilders.Build(System.Action{XExten.Advance.HttpFramework.MultiOption.BuilderOption},System.Action{System.Net.Http.HttpClientHandler})">
            <summary>
            构建
            </summary>
            <param name="action"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IBuilders.RunBytes(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            请求
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IBuilders.RunBytesAsync(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            请求
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IBuilders.RunString(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            请求
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IBuilders.RunStringAsync(System.Action{System.Net.CookieContainer,System.Uri})">
            <summary>
            请求
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiInterface.ICookies">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.ICookies.Build(System.Action{XExten.Advance.HttpFramework.MultiOption.BuilderOption},System.Action{System.Net.Http.HttpClientHandler})">
            <summary>
            Builder
            </summary>
            <param name="action"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.ICookies.AddCookie(System.Action{XExten.Advance.HttpFramework.MultiOption.CookieOption})">
            <summary>
            Cookie
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.ICookies.AddNode(System.Action{XExten.Advance.HttpFramework.MultiOption.NodeOption})">
            <summary>
            Node
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.ICookies.AddHeader(System.Action{XExten.Advance.HttpFramework.MultiOption.HeaderOption})">
            <summary>
            Header
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiInterface.IHeaders">
            <summary>
            Header
            </summary>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IHeaders.Build(System.Action{XExten.Advance.HttpFramework.MultiOption.BuilderOption},System.Action{System.Net.Http.HttpClientHandler})">
            <summary>
            Builder
            </summary>
            <param name="action"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IHeaders.AddCookie(System.Action{XExten.Advance.HttpFramework.MultiOption.CookieOption})">
            <summary>
            Cookie
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IHeaders.AddNode(System.Action{XExten.Advance.HttpFramework.MultiOption.NodeOption})">
            <summary>
            Node
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.IHeaders.AddHeader(System.Action{XExten.Advance.HttpFramework.MultiOption.HeaderOption})">
            <summary>
            Header
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiInterface.INodes">
            <summary>
            Node
            </summary>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.INodes.Build(System.Action{XExten.Advance.HttpFramework.MultiOption.BuilderOption},System.Action{System.Net.Http.HttpClientHandler})">
            <summary>
            Builder
            </summary>
            <param name="action"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.INodes.AddCookie(System.Action{XExten.Advance.HttpFramework.MultiOption.CookieOption})">
            <summary>
            Cookie
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.INodes.AddNode(System.Action{XExten.Advance.HttpFramework.MultiOption.NodeOption})">
            <summary>
            Node
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.HttpFramework.MultiInterface.INodes.AddHeader(System.Action{XExten.Advance.HttpFramework.MultiOption.HeaderOption})">
            <summary>
            Header
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiOption.BuilderOption">
            <summary>
            BuilderOption
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.BuilderOption.TimeOut">
            <summary>
            TimeOut
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.BuilderOption.CacheTime">
            <summary>
            CacheTime
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.BuilderOption.UseHttps">
            <summary>
            UseHttps
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.BuilderOption.UseZip">
            <summary>
            数据压缩
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiOption.CookieOption">
            <summary>
            CookieOption
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.URI">
            <summary>
            URI
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.CookieName">
            <summary>
            CookieName
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.CookieValue">
            <summary>
            CookieValue
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.CookiePath">
            <summary>
            CookiePath
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.CookieDomain">
            <summary>
            CookieDomain
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.CookieOption.CookieColl">
            <summary>
            CookieColl
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiOption.HeaderOption">
            <summary>
            HeaderOption
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.HeaderOption.HeaderKey">
            <summary>
            HeaderKey
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.HeaderOption.HeaderValue">
            <summary>
            HeaderValue
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.HeaderOption.Headers">
            <summary>
            Headers
            </summary>
        </member>
        <member name="T:XExten.Advance.HttpFramework.MultiOption.NodeOption">
            <summary>
            NodeOption
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.NodePath">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.ReqType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.CacheNode">
            <summary>
            缓存当前节点
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.JsonParam">
            <summary>
            Json格式参数
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.EntityParam">
            <summary>
            实体参数
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.FormParam">
            <summary>
            表单参数
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.MapFied">
            <summary>
            字段映射
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.Contents">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:XExten.Advance.HttpFramework.MultiOption.NodeOption.URI">
            <summary>
            地址
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Email.EmailSettting">
            <summary>
            邮箱配置
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSettting.SmtpHost">
            <summary>
            邮箱地址
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSettting.EmailAccount">
            <summary>
            邮箱账号
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSettting.EmailPassWord">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailSettting.SendTitle">
            <summary>
            发送标题
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Email.EmailUtil">
            <summary>
            邮箱工具类
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Email.EmailUtil.SendMail(XExten.Advance.InternalFramework.Email.EmailViewModel)">
            <summary>
             发送邮件
            </summary>
            <param name="View"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Email.EmailViewModel">
            <summary>
            邮箱内容
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailViewModel.AcceptedAddress">
            <summary>
            收件人邮箱
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailViewModel.Title">
            <summary>
            发送标题
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.Email.EmailViewModel.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Express.Common.QType">
             <summary>
            
             </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.NotLike">
            <summary>
            NotLike
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.Equals">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.NotEquals">
            <summary>
            NotEquals
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.GreaterThan">
            <summary>
            GreaterThan
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.GreaterThanOrEqual">
            <summary>
            GreaterThanOrEqual
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.LessThan">
            <summary>
            LessThan
            </summary>
        </member>
        <member name="F:XExten.Advance.InternalFramework.Express.Common.QType.LessThanOrEqual">
            <summary>
            LessThanOrEqual
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.SetProptertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            设置属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.GetExpression``1(System.String[])">
            <summary>
             返回一个new表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.GetExpression``1(System.String,System.Object,XExten.Advance.InternalFramework.Express.Common.QType)">
            <summary>
             返回一个bool表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne AND ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Express.Expsion.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne or ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.InternalFramework.FileWatch.FileModule">
            <summary>
            文件模式
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Pattern">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.IsInclude">
            <summary>
            是否包含文件夹
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Module">
            <summary>
            false 只是监听文件,true 监听并读取
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Action">
            <summary>
            监听并读取
            </summary>
        </member>
        <member name="P:XExten.Advance.InternalFramework.FileWatch.FileModule.Events">
            <summary>
            监听文件
            </summary>
        </member>
        <member name="T:XExten.Advance.InternalFramework.FileWatch.FileMonitor">
            <summary>
            文件监听
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.FileWatch.FileMonitor.MonitorRead(XExten.Advance.InternalFramework.FileWatch.FileModule)">
            <summary>
            文件监听(读取)
            </summary>
            <param name="Module"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.FileWatch.FileMonitor.MonitorInit(XExten.Advance.InternalFramework.FileWatch.FileModule)">
            <summary>
            文件监听(不读取)
            </summary>
            <param name="Module"></param>
        </member>
        <member name="T:XExten.Advance.InternalFramework.Md5">
            <summary>
            md5
            </summary>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Md5.Md5By32(System.String)">
            <summary>
            32bit
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:XExten.Advance.InternalFramework.Md5.Md5By16(System.String)">
            <summary>
            16bit
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.LinqFramework.SyncLinq">
            <summary>
            LinqExtension
            </summary>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsInt(System.String)">
            <summary>
            To Int
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsLong(System.String)">
            <summary>
            To Long
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDateTime(System.String)">
            <summary>
            To DateTime
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsString(System.Object)">
            <summary>
            To String
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBool(System.String)">
            <summary>
            To Bool
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBool(System.Int32)">
            <summary>
            To Bool
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsBytes(System.String)">
            <summary>
            To Bytes
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.AsDecimal(System.String)">
            <summary>
            To Decimal
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToRodAsync(System.Decimal,System.Int32)">
             <summary>
            保留小数非四舍五入
             </summary>
             <param name="param"></param>
             <param name="parrent"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMd5Async(System.String,System.Int32)">
            <summary>
            Md5
            </summary>
            <param name="param"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToFmtDateAsync(System.DateTime,System.Int32,System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="param"></param>
            <param name="fmtType">
            0 : default
            1 : yyyy-MM-dd HH:mm:ss:ffff
            2 : yyyy年MM月dd日
            </param>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToEntityAsync``1(System.Data.DataTable)">
            <summary>
            DataTable 2 Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJsonAsync``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModelAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDesAsync(System.Enum)">
            <summary>
            返回指定的枚举描述值
            </summary>
            <param name="Param"></param>
            <returns>枚举描叙</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToAttrAsync``2(``0,System.String,System.Boolean)">
            <summary>
            获取指定字段的Attribute
            </summary>
            <typeparam name="TSource">指定实体</typeparam>
            <typeparam name="TAttribute">特性</typeparam>
            <param name="Param">指定实体</param>
            <param name="FieldName">字段名</param>
            <param name="IsProperty">是否获取属性</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToTablesAsync``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync``1(System.Object)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync``1(System.Object,System.Type)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync``2(System.Object)">
            <summary>
            映射集合
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapperAsync(System.Object,System.Type,System.Type,System.Type)">
            <summary>
            映射集合
            </summary>
            <param name="param"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapestAsync``1(System.Object,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapestAsync(System.Object,System.Type,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="destinationType"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUriAsync``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            将实体转为URL参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="MapFied"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUriAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            将键值对转为URL参数
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithNamesAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回实体中所有的字段名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsNullOrEmpty(System.String)">
             <summary>
            检查字符
             </summary>
             <param name="param"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检查集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.IsIDCard(System.String)">
            <summary>
            是否身份证
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToRod(System.Decimal,System.Int32)">
             <summary>
            保留小数非四舍五入
             </summary>
             <param name="param"></param>
             <param name="parrent"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMd5(System.String,System.Int32)">
            <summary>
            Md5
            </summary>
            <param name="param"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToFmtDate(System.DateTime,System.Int32,System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="param"></param>
            <param name="fmtType">
            0 : default
            1 : yyyy-MM-dd HH:mm:ss:ffff
            2 : yyyy年MM月dd日
            </param>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToEntity``1(System.Data.DataTable)">
            <summary>
            DataTable 2 Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJson``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToJsonLight``1(``0,System.Boolean)">
            <summary>
            序列化对象MsgPack
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModelLight``1(``0,System.Byte[]@,System.Boolean)">
            <summary>
            反序列化对象MsgPack
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="bytes"></param>
            <param name="isPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToModel``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 JsonNet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="Option"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDes(System.Enum)">
            <summary>
            返回指定的枚举描述值
            </summary>
            <param name="Param"></param>
            <returns>枚举描叙</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToDes``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToAttr``2(``0,System.String,System.Boolean)">
            <summary>
            获取指定字段的Attribute
            </summary>
            <typeparam name="TSource">指定实体</typeparam>
            <typeparam name="TAttribute">特性</typeparam>
            <param name="Param">指定实体</param>
            <param name="FieldName">字段名</param>
            <param name="IsProperty">是否获取属性</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToTables``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper``1(System.Object)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper(System.Object,System.Type)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper``2(System.Object)">
            <summary>
            映射集合
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapper(System.Object,System.Type,System.Type,System.Type)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapest``1(System.Object,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ToMapest(System.Object,System.Type,Mapster.TypeAdapterConfig)">
            <summary>
            映射对象
            </summary>
            <param name="param"></param>
            <param name="destinationType"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUri``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            将实体转为URL参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="MapFied"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ByUri(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            将键值对转为URL参数
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForDicEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            遍历字典
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForArrayEach``1(System.Array,System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.ForEnumerEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <param name="action"></param>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.WithNames``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回实体中所有的字段名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne AND ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne or ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.LinqFramework.SyncLinq.RegistAop``1(DryIoc.IContainer)">
            <summary>
            注册代理
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.StaticFramework.SyncStatic">
            <summary>
            StaticUtil
            </summary>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.TryCatch(System.Action,System.Action{System.Exception},System.Action)">
            <summary>
            异常处理
            </summary>
            <param name="action"></param>
            <param name="ection"></param>
            <param name="final"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.TryCatch``1(System.Func{``0},System.Func{System.Exception,``0},System.Action)">
            <summary>
            异常处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="ection"></param>
            <param name="final"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.RandomPho">
            <summary>
            随机手机
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.CHNPinYin(System.String,Chinese.PinyinFormat,Chinese.ChineseTypes)">
            <summary>
            获取中文拼音
            </summary>
            <param name="Chinese"></param>
            <param name="format"></param>
            <param name="chineseType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.BarHtml(System.String,System.Int32,System.Int32)">
            <summary>
            返回条形码
            </summary>
            <param name="param"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ReadXml(System.String,System.String,System.String)">
            <summary>
            读取Xml
            </summary>
            <param name="NodeItem"></param>
            <param name="NodeKey"></param>
            <param name="NodeValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ConvertStamptime(System.String)">
            <summary>
            时间戳转时间
            </summary>
            <param name="TimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.ConvertDateTime(System.DateTime,System.Boolean)">
            <summary>
            时间转时间戳
            </summary>
            <param name="TimeStamp"></param>
            <param name="RtSecond">True 返回秒 False 返回毫秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.XmlSerializer``1(``0)">
            <summary>
            将对象序列化为XML(XmlSerializer)
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            (Description: This method serializes complex classes. If you do not declare features such as XmlInclude, you may get an error "Use the XmlInclude or SoapInclude feature to statically specify a non-known type.")
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.XmlDeserialize``1(System.String)">
            <summary>
            反系列化XML(XmlDeserialize)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Xml"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.VerifyCode">
            <summary>
            创建一个验证吗
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.Assembly(System.String)">
            <summary>
            获取指定的程序集
            </summary>
            <param name="AssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.SetProptertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            设置属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.FileMonitors(XExten.Advance.InternalFramework.FileWatch.FileModule)">
            <summary>
            文件监听
            </summary>
            <param name="Module"></param>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.GetExpression``1(System.String[])">
            <summary>
             返回一个new表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Advance.StaticFramework.SyncStatic.GetExpression``1(System.String,System.Object,XExten.Advance.InternalFramework.Express.Common.QType)">
            <summary>
             返回一个bool表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.Enum.ValitionEnum">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="F:XExten.Advance.ValidataFramework.Enum.ValitionEnum.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:XExten.Advance.ValidataFramework.Enum.ValitionEnum.NotNull">
            <summary>
            非空验证
            </summary>
        </member>
        <member name="F:XExten.Advance.ValidataFramework.Enum.ValitionEnum.Regex">
            <summary>
            正则验证
            </summary>
        </member>
        <member name="F:XExten.Advance.ValidataFramework.Enum.ValitionEnum.Customer">
            <summary>
            自定义验证
            </summary>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.Enum.ValitionModuleEnum">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="F:XExten.Advance.ValidataFramework.Enum.ValitionModuleEnum.Single">
            <summary>
            单个验证不满足则返回
            </summary>
        </member>
        <member name="F:XExten.Advance.ValidataFramework.Enum.ValitionModuleEnum.Global">
            <summary>
            全局验证完统一返回
            </summary>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionAttribute">
            <summary>
            参数验证
            </summary>
        </member>
        <member name="P:XExten.Advance.ValidataFramework.ValitionAttribute.InfoMsg">
            <summary>
            验证消息
            </summary>
        </member>
        <member name="P:XExten.Advance.ValidataFramework.ValitionAttribute.ValiType">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:XExten.Advance.ValidataFramework.ValitionAttribute.RegexStr">
            <summary>
            正在表达式
            </summary>
        </member>
        <member name="P:XExten.Advance.ValidataFramework.ValitionAttribute.UsageAppendField">
            <summary>
            是否使用不满足要求的自动名称代入返回信息
            </summary>
        </member>
        <member name="P:XExten.Advance.ValidataFramework.ValitionAttribute.CustomerValition">
            <summary>
            自定义验证 需要自行实现ValitionBaseCustomer
            </summary>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionBaseCustomer">
            <summary>
            自定义验证父类
            </summary>
        </member>
        <member name="M:XExten.Advance.ValidataFramework.ValitionBaseCustomer.UserCustomerValition(System.String,System.String)">
            <summary>
            自定义验证
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="requestParam">请求参数</param>
            <returns>T1 是否符合要求,T2 验证信息</returns>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionBaseRule">
            <summary>
            校验规则
            </summary>
        </member>
        <member name="M:XExten.Advance.ValidataFramework.ValitionBaseRule.ValitionRules(System.Collections.Generic.Dictionary{System.String,System.String},System.Reflection.ParameterInfo[])">
            <summary>
            校验逻辑
            </summary>
            <param name="pairs"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionClassAttribute">
            <summary>
            参数验证
            </summary>
        </member>
        <member name="P:XExten.Advance.ValidataFramework.ValitionClassAttribute.ModuleType">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionExtension">
            <summary>
            注册验证框架
            </summary>
        </member>
        <member name="M:XExten.Advance.ValidataFramework.ValitionExtension.UseValition(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用验证
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionMiddleWare">
            <summary>
            验证中间件
            </summary>
        </member>
        <member name="M:XExten.Advance.ValidataFramework.ValitionMiddleWare.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            初始化
            </summary>
            <param name="RequestDelegates"></param>
        </member>
        <member name="M:XExten.Advance.ValidataFramework.ValitionMiddleWare.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Advance.ValidataFramework.ValitionRule">
            <summary>
            校验规则
            </summary>
        </member>
        <member name="M:XExten.Advance.ValidataFramework.ValitionRule.ValitionRules(System.Collections.Generic.Dictionary{System.String,System.String},System.Reflection.ParameterInfo[])">
            <summary>
            验证参数
            </summary>
            <param name="pairs"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
    </members>
</doc>
